name: Release Management

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "18"
      production-branch:
        description: "Branch name for production"
        required: false
        type: string
        default: "main"
      develop-branch:
        description: "Branch name for development"
        required: false
        type: string
        default: "develop"
      release-prefix:
        description: "Prefix for release branches"
        required: false
        type: string
        default: "release/"
      hotfix-prefix:
        description: "Prefix for hotfix branches"
        required: false
        type: string
        default: "hotfix/"
      default-last-release-tag:
        description: "Default tag to use if no previous release is found"
        required: false
        type: string
        default: ""
      github-token:
        description: "GitHub token with repo scope"
        required: true
        type: string
      app-id:
        description: "GitHub App ID for token generation"
        required: false
        type: string
        default: ""
      app-private-key:
        description: "GitHub App private key for token generation"
        required: false
        type: string
        default: ""
      changelog-config-path:
        description: "Path to the changelog configuration file"
        required: false
        type: string
        default: ".github/changelog-config.json"

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, format('refs/heads/{0}', inputs.release-prefix)) || startsWith(github.ref, format('refs/heads/{0}', inputs.hotfix-prefix))
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      branch_name: ${{ steps.extract-version.outputs.branch_name }}
      release_type: ${{ steps.extract-version.outputs.type }}
      token: ${{ steps.set-token.outputs.token }}
    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: tibdex/github-app-token@v2
        if: ${{ inputs.app-id != '' && inputs.app-private-key != '' }}
        with:
          app_id: ${{ inputs.app-id }}
          private_key: ${{ inputs.app-private-key }}

      - name: Set token value
        id: set-token
        run: |
          if [[ -n "${{ steps.generate-token.outputs.token }}" ]]; then
            echo "token=${{ steps.generate-token.outputs.token }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ inputs.github-token }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.set-token.outputs.token }}

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Extract version
        id: extract-version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME == ${{ inputs.release-prefix }}* ]]; then
            VERSION=${BRANCH_NAME#${{ inputs.release-prefix }}}
            TYPE="Release"
          elif [[ $BRANCH_NAME == ${{ inputs.hotfix-prefix }}* ]]; then
            VERSION=${BRANCH_NAME#${{ inputs.hotfix-prefix }}}
            TYPE="Hotfix"
          else
            echo "Error: Not a release or hotfix branch"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.extract-version.outputs.version }} --no-git-tag-version

      - name: Commit version changes
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.extract-version.outputs.version }}"
          git push

  publish-release:
    name: Publish GitHub release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'workflow_dispatch' && (startsWith(github.ref, format('refs/heads/{0}', inputs.release-prefix)) || startsWith(github.ref, format('refs/heads/{0}', inputs.hotfix-prefix)))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ needs.prepare-release.outputs.token }}

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Find the previous release tag for determining changelog scope
      - name: Get previous release tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -z "$PREVIOUS_TAG" && -n "${{ inputs.default-last-release-tag }}" ]]; then
            PREVIOUS_TAG="${{ inputs.default-last-release-tag }}"
          fi
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous release tag: $PREVIOUS_TAG"

      # Check if changelog configuration file exists
      - name: Check for changelog config
        id: check-changelog-config
        run: |
          if [ -f "${{ inputs.changelog-config-path }}" ]; then
            echo "config_exists=true" >> $GITHUB_OUTPUT
          else
            echo "config_exists=false" >> $GITHUB_OUTPUT
            echo "No changelog config found at ${{ inputs.changelog-config-path }}, using default configuration."
          fi

      # Generate changelog using marketplace action
      - name: Build Changelog
        id: build-changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: "${{ steps.check-changelog-config.outputs.config_exists == 'true' && inputs.changelog-config-path || '' }}"
          ignorePreReleases: "false"
          fromTag: "${{ steps.previous-tag.outputs.tag }}"
          toTag: "${{ github.ref }}"
          commitMode: "true"
        env:
          GITHUB_TOKEN: ${{ needs.prepare-release.outputs.token }}

      # Format the changelog body for the release
      - name: Format changelog
        id: format-changelog
        run: |
          CHANGELOG_BODY="# ${{ needs.prepare-release.outputs.release_type }} v${{ needs.prepare-release.outputs.version }}

          ${{ steps.build-changelog.outputs.changelog }}

          **Full Changelog**: ${{ steps.previous-tag.outputs.tag != '' && format('{0}...v{1}', steps.previous-tag.outputs.tag, needs.prepare-release.outputs.version) || format('...v{0}', needs.prepare-release.outputs.version) }}"

          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Create GitHub Release with the gh-release action
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: "${{ needs.prepare-release.outputs.release_type }} v${{ needs.prepare-release.outputs.version }}"
          body: ${{ steps.format-changelog.outputs.body }}
          draft: false
          prerelease: false
          token: ${{ needs.prepare-release.outputs.token }}

      # Automatic back-merge flow (no PR creation - direct merge)
      - name: Merge to main
        run: |
          git checkout ${{ inputs.production-branch }}
          git merge --no-ff ${{ github.ref_name }} -m "chore(release): merge ${{ github.ref_name }} into ${{ inputs.production-branch }}"
          git push origin ${{ inputs.production-branch }}

      - name: Automatic back-merge from main to develop
        run: |
          # Ensure we have the latest version of develop
          git fetch origin ${{ inputs.develop-branch }}
          # Check out develop branch
          git checkout ${{ inputs.develop-branch }}
          # Merge main into develop - this is the automatic back-merge
          git merge --no-ff ${{ inputs.production-branch }} -m "chore(back-merge): sync ${{ inputs.production-branch }} into ${{ inputs.develop-branch }} after ${{ needs.prepare-release.outputs.release_type }} v${{ needs.prepare-release.outputs.version }}"
          # Push the changes
          git push origin ${{ inputs.develop-branch }}

      - name: Delete release branch
        if: success()
        run: git push origin --delete ${{ github.ref_name }}
