name: NextJS CI/CD Pipeline

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "18"
      vercel-project-id:
        description: "Vercel project ID"
        required: true
        type: string
      trunk-auto-fix:
        description: "Whether Trunk should auto-fix issues"
        required: false
        type: boolean
        default: false
      production-branch:
        description: "Branch name for production deployment"
        required: false
        type: string
        default: "main"
      staging-branch:
        description: "Branch name for staging deployment"
        required: false
        type: string
        default: "develop"
    secrets:
      vercel-token:
        description: "Vercel token for deployment"
        required: true
      github-token:
        description: "GitHub token with repo scope"
        required: true

jobs:
  # Lint and security scan run in parallel
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Setup Trunk
        uses: trunk-io/trunk-action@v1

      - name: Run Trunk Check
        run: trunk check --all
        if: ${{ !inputs.trunk-auto-fix }}

      - name: Run Trunk with auto-fix
        run: trunk check --all --fix
        if: ${{ inputs.trunk-auto-fix }}

      - name: Verify Commitlint
        run: npx commitlint --from ${{ github.event.pull_request.base.sha || 'HEAD~1' }} --to ${{ github.event.pull_request.head.sha || 'HEAD' }} --verbose
        if: ${{ github.event_name == 'pull_request' }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
      - name: Upload npm audit report
        run: npm audit --json > npm-audit.json
        continue-on-error: true
      - name: Upload audit artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: npm-audit.json
          if-no-files-found: ignore

  test:
    name: Run tests (matrix)
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/
          if-no-files-found: ignore
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: ignore

  build:
    name: Build application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .next/
          if-no-files-found: error

  preview-deploy:
    name: Deploy preview environment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.vercel-token }}

      - name: Deploy to Vercel (Preview)
        id: deploy-preview
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.vercel-token }} --project=${{ inputs.vercel-project-id }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment on PR with Preview URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `ðŸš€ Preview deployed to: ${{ steps.deploy-preview.outputs.deployment-url }}`
            });

  staging-deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == format('refs/heads/{0}', inputs.staging-branch)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.vercel-token }}

      - name: Deploy to Vercel (Staging)
        run: vercel deploy --token=${{ secrets.vercel-token }} --project=${{ inputs.vercel-project-id }}

  production-deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == format('refs/heads/{0}', inputs.production-branch)
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.vercel-token }}

      - name: Deploy to Vercel (Production)
        run: vercel deploy --prod --token=${{ secrets.vercel-token }} --project=${{ inputs.vercel-project-id }}
